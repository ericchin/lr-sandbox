/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ericwchin.liferay.pwa.model.impl;

import com.ericwchin.liferay.pwa.model.BrowserSubscription;
import com.ericwchin.liferay.pwa.model.BrowserSubscriptionModel;
import com.ericwchin.liferay.pwa.model.BrowserSubscriptionSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BrowserSubscription service. Represents a row in the &quot;PWA_BrowserSubscription&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BrowserSubscriptionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BrowserSubscriptionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BrowserSubscriptionImpl
 * @generated
 */
@JSON(strict = true)
public class BrowserSubscriptionModelImpl
	extends BaseModelImpl<BrowserSubscription>
	implements BrowserSubscriptionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a browser subscription model instance should use the <code>BrowserSubscription</code> interface instead.
	 */
	public static final String TABLE_NAME = "PWA_BrowserSubscription";

	public static final Object[][] TABLE_COLUMNS = {
		{"browserSubscriptionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"endpoint", Types.VARCHAR},
		{"auth", Types.VARCHAR}, {"key_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("browserSubscriptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endpoint", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PWA_BrowserSubscription (browserSubscriptionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,endpoint VARCHAR(2000) null,auth VARCHAR(2000) null,key_ VARCHAR(2000) null)";

	public static final String TABLE_SQL_DROP =
		"drop table PWA_BrowserSubscription";

	public static final String ORDER_BY_JPQL =
		" ORDER BY browserSubscription.browserSubscriptionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PWA_BrowserSubscription.browserSubscriptionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static final long BROWSERSUBSCRIPTIONID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BrowserSubscription toModel(
		BrowserSubscriptionSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		BrowserSubscription model = new BrowserSubscriptionImpl();

		model.setBrowserSubscriptionId(soapModel.getBrowserSubscriptionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEndpoint(soapModel.getEndpoint());
		model.setAuth(soapModel.getAuth());
		model.setKey(soapModel.getKey());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BrowserSubscription> toModels(
		BrowserSubscriptionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<BrowserSubscription> models = new ArrayList<BrowserSubscription>(
			soapModels.length);

		for (BrowserSubscriptionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public BrowserSubscriptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _browserSubscriptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBrowserSubscriptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _browserSubscriptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BrowserSubscription.class;
	}

	@Override
	public String getModelClassName() {
		return BrowserSubscription.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BrowserSubscription, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BrowserSubscription, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BrowserSubscription, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BrowserSubscription)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BrowserSubscription, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BrowserSubscription, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BrowserSubscription)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BrowserSubscription, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BrowserSubscription, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, BrowserSubscription>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			BrowserSubscription.class.getClassLoader(),
			BrowserSubscription.class, ModelWrapper.class);

		try {
			Constructor<BrowserSubscription> constructor =
				(Constructor<BrowserSubscription>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<BrowserSubscription, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BrowserSubscription, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BrowserSubscription, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<BrowserSubscription, Object>>();
		Map<String, BiConsumer<BrowserSubscription, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<BrowserSubscription, ?>>();

		attributeGetterFunctions.put(
			"browserSubscriptionId",
			BrowserSubscription::getBrowserSubscriptionId);
		attributeSetterBiConsumers.put(
			"browserSubscriptionId",
			(BiConsumer<BrowserSubscription, Long>)
				BrowserSubscription::setBrowserSubscriptionId);
		attributeGetterFunctions.put(
			"groupId", BrowserSubscription::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<BrowserSubscription, Long>)
				BrowserSubscription::setGroupId);
		attributeGetterFunctions.put(
			"companyId", BrowserSubscription::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<BrowserSubscription, Long>)
				BrowserSubscription::setCompanyId);
		attributeGetterFunctions.put("userId", BrowserSubscription::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<BrowserSubscription, Long>)
				BrowserSubscription::setUserId);
		attributeGetterFunctions.put(
			"userName", BrowserSubscription::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<BrowserSubscription, String>)
				BrowserSubscription::setUserName);
		attributeGetterFunctions.put(
			"createDate", BrowserSubscription::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<BrowserSubscription, Date>)
				BrowserSubscription::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", BrowserSubscription::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<BrowserSubscription, Date>)
				BrowserSubscription::setModifiedDate);
		attributeGetterFunctions.put(
			"endpoint", BrowserSubscription::getEndpoint);
		attributeSetterBiConsumers.put(
			"endpoint",
			(BiConsumer<BrowserSubscription, String>)
				BrowserSubscription::setEndpoint);
		attributeGetterFunctions.put("auth", BrowserSubscription::getAuth);
		attributeSetterBiConsumers.put(
			"auth",
			(BiConsumer<BrowserSubscription, String>)
				BrowserSubscription::setAuth);
		attributeGetterFunctions.put("key", BrowserSubscription::getKey);
		attributeSetterBiConsumers.put(
			"key",
			(BiConsumer<BrowserSubscription, String>)
				BrowserSubscription::setKey);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getBrowserSubscriptionId() {
		return _browserSubscriptionId;
	}

	@Override
	public void setBrowserSubscriptionId(long browserSubscriptionId) {
		_browserSubscriptionId = browserSubscriptionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEndpoint() {
		if (_endpoint == null) {
			return "";
		}
		else {
			return _endpoint;
		}
	}

	@Override
	public void setEndpoint(String endpoint) {
		_endpoint = endpoint;
	}

	@JSON
	@Override
	public String getAuth() {
		if (_auth == null) {
			return "";
		}
		else {
			return _auth;
		}
	}

	@Override
	public void setAuth(String auth) {
		_auth = auth;
	}

	@JSON
	@Override
	public String getKey() {
		if (_key == null) {
			return "";
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_key = key;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BrowserSubscription.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BrowserSubscription toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BrowserSubscription>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BrowserSubscriptionImpl browserSubscriptionImpl =
			new BrowserSubscriptionImpl();

		browserSubscriptionImpl.setBrowserSubscriptionId(
			getBrowserSubscriptionId());
		browserSubscriptionImpl.setGroupId(getGroupId());
		browserSubscriptionImpl.setCompanyId(getCompanyId());
		browserSubscriptionImpl.setUserId(getUserId());
		browserSubscriptionImpl.setUserName(getUserName());
		browserSubscriptionImpl.setCreateDate(getCreateDate());
		browserSubscriptionImpl.setModifiedDate(getModifiedDate());
		browserSubscriptionImpl.setEndpoint(getEndpoint());
		browserSubscriptionImpl.setAuth(getAuth());
		browserSubscriptionImpl.setKey(getKey());

		browserSubscriptionImpl.resetOriginalValues();

		return browserSubscriptionImpl;
	}

	@Override
	public int compareTo(BrowserSubscription browserSubscription) {
		long primaryKey = browserSubscription.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BrowserSubscription)) {
			return false;
		}

		BrowserSubscription browserSubscription = (BrowserSubscription)object;

		long primaryKey = browserSubscription.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		BrowserSubscriptionModelImpl browserSubscriptionModelImpl = this;

		browserSubscriptionModelImpl._originalGroupId =
			browserSubscriptionModelImpl._groupId;

		browserSubscriptionModelImpl._setOriginalGroupId = false;

		browserSubscriptionModelImpl._originalUserId =
			browserSubscriptionModelImpl._userId;

		browserSubscriptionModelImpl._setOriginalUserId = false;

		browserSubscriptionModelImpl._setModifiedDate = false;

		browserSubscriptionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BrowserSubscription> toCacheModel() {
		BrowserSubscriptionCacheModel browserSubscriptionCacheModel =
			new BrowserSubscriptionCacheModel();

		browserSubscriptionCacheModel.browserSubscriptionId =
			getBrowserSubscriptionId();

		browserSubscriptionCacheModel.groupId = getGroupId();

		browserSubscriptionCacheModel.companyId = getCompanyId();

		browserSubscriptionCacheModel.userId = getUserId();

		browserSubscriptionCacheModel.userName = getUserName();

		String userName = browserSubscriptionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			browserSubscriptionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			browserSubscriptionCacheModel.createDate = createDate.getTime();
		}
		else {
			browserSubscriptionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			browserSubscriptionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			browserSubscriptionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		browserSubscriptionCacheModel.endpoint = getEndpoint();

		String endpoint = browserSubscriptionCacheModel.endpoint;

		if ((endpoint != null) && (endpoint.length() == 0)) {
			browserSubscriptionCacheModel.endpoint = null;
		}

		browserSubscriptionCacheModel.auth = getAuth();

		String auth = browserSubscriptionCacheModel.auth;

		if ((auth != null) && (auth.length() == 0)) {
			browserSubscriptionCacheModel.auth = null;
		}

		browserSubscriptionCacheModel.key = getKey();

		String key = browserSubscriptionCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			browserSubscriptionCacheModel.key = null;
		}

		return browserSubscriptionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BrowserSubscription, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BrowserSubscription, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BrowserSubscription, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((BrowserSubscription)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BrowserSubscription, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BrowserSubscription, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BrowserSubscription, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BrowserSubscription)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BrowserSubscription>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _browserSubscriptionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _endpoint;
	private String _auth;
	private String _key;
	private long _columnBitmask;
	private BrowserSubscription _escapedModel;

}